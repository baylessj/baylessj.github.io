<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Jonathan Bayless</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000"/>
 <updated>2021-09-16T11:13:39-07:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Jonathan Bayless</name>
   <email>me@jonathanbayless.com</email>
 </author>

 
 <entry>
   <title>Job Search Experience</title>
   <link href="http://localhost:4000/2021/09/13/job-search.html"/>
   <updated>2021-09-13T00:00:00-07:00</updated>
   <id>http://localhost:4000/2021/09/13/job-search</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/job_sankey.png&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/job_sankey.png 360w, /assets/img/480/job_sankey.png 480w, /assets/img/640/job_sankey.png 640w&quot; alt=&quot;Sankey Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last few months have included my first foray into job searching post-college. I started looking when I had reached about 2 years of experience at my past role. In the world of software development this typically is the time when it becomes possible to find a job at a higher level (pay + title) than is available to recent college graduates. I took this opportunity to make a parallel move, however, into a different area of software development. My past three roles were as an embedded software engineer working in lower level programming languages on small electronic devices. I spent a lot of time outside of work trying my hand at web development, however, and wanted to make a switch to that field. Web development would give me an opportunity to work in higher level languages with more focus on the business requirements and less on making things work with difficult hardware constraints. In addition, the web development field has a larger set of opportunities for remote work at tech-focused companies. Making a parallel move to a new field meant that I would be staying at the same new-graduate level as I started at 2 years ago, but with an exciting set of new tech to work on.&lt;/p&gt;

&lt;p&gt;The vast majority of applications that I put out were towards companies that I found through &lt;a href=&quot;&quot;&gt;Hacker News’&lt;/a&gt; monthly &lt;a href=&quot;&quot;&gt;Who is Hiring?&lt;/a&gt; posts. This job posting thread is an informal grouping of posts from the employees of a wide vareity of tech companies. Some of these companies are early-stage startups that are backed by Y Combinator, the company that runs Hacker News, and some are tech giants like Google and Amazon. Most of my applications went towards companies in the middle of these two groups – companies that would be large enough to afford to train up a new guy like me but not so large that they would be looking primarily for traditional candidates with a CS degree from MIT or anything.&lt;/p&gt;

&lt;p&gt;There seemed to be two paths that companies would take in the interview process: some would go through the traditional path of a phone screen and a handful of technical interviews, and others would start with a coding challenge and then follow up with a couple of technical interviews. I found the former path to be the best fit for me and the interviewers that I worked with; I got the opportunity to learn more about the role and the company I had applied to before jumping right into a technical evaluation. Only one of the companies that sent me a coding challenge right off the bat later gave me an opportunity to talk about less technical aspects of the role. The others seemed to view the interview process as a simple evaluation of my technical skills with no consideration for how I would fit into their team.&lt;/p&gt;

&lt;p&gt;One thing that surprised me at first about this job search was the quantity of technical interviews that most companies wanted. Applying for jobs in college usually consisted of two or three interviews including the initial phone screen. The interview process this time around usually consisted of a phone screen and then three or four technical interviews. I do have a lot more to talk about interviews now that I have more than a couple of internships on my resume, but it did still feel like an awful lot of repetition of the same technical discussion compared to the streamlined process I found when applying in college.&lt;/p&gt;

&lt;p&gt;The process of finding a new role was tumultuous, with tons of technical interviews, a lot of time spent on coding challenges, and a number of frustrating “ghosting”s from recruiters late into the interview process. Looking back on this experience, I think I would have spent less time on coding challenges that came to me as the first response to an application before having a phone screen or anything. The interview process and large number of applications was worth it, though, as I’ve found a great fit for me with a company that I had not heard much of before my search. It’s a bit to early in this new role to say for sure if the switch to web development was the right long-term choice for me, but I can certainly say that my first impressions of the role have been great.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Github Copilot Beta -- My Experience</title>
   <link href="http://localhost:4000/2021/08/01/github-copilot.html"/>
   <updated>2021-08-01T00:00:00-07:00</updated>
   <id>http://localhost:4000/2021/08/01/github-copilot</id>
   <content type="html">&lt;p&gt;A couple weeks ago I received access to the &lt;a href=&quot;https://copilot.github.com/&quot;&gt;Github Copilot&lt;/a&gt; beta. Github Copilot is a tool for writing code that is like autocomplete on steroids; it is marketed as having the ability to write whole lines and functions of code for you. Copilot is available to beta testers as a Visual Studio Code extension and supports most common programming languages.&lt;/p&gt;

&lt;p&gt;My experience with Copilot has been that it is a fantastic autocomplete tool, but it is not really a full “autocoding” tool that will produce working software from code comments. In theory, Copilot’s AI model can generate whole functions worth of code to implement the description specified in its name and docstring. My usage of the tool, however, has been very similar to my usage of &lt;a href=&quot;https://www.tabnine.com/&quot;&gt;tabnine&lt;/a&gt; before it, where I would rely on its autocomplete to finish trivial lines of code and docstrings. Copilot excels in speeding up this mindless writing of docstrings or boilerplate code. I don’t find it to be very helpful in writing whole functions for me, but reducing the time I have to spend thinking through boilerplate code has increased the amount of time I can spend thinking through the difficult problems in my code.&lt;/p&gt;

&lt;p&gt;I don’t find there to be a huge improvement in Github Copilot’s single-line suggestions over Tabnine’s, but I do significantly prefer Copilot’s interface. Copilot’s suggestions are appending as low opacity text to the end of the line you’re typing on and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tab&lt;/code&gt; keystroke fills in the suggestion. This is much less invasive than Tabnine and the default VSCode Intellisense suggestions that will hijack the up and down arrow keys with their floating suggestion box. Copilot is worth the switch for that point alone in my opinion, this design choice matches excellently with its niche as a superpowered autocomplete engine.&lt;/p&gt;

&lt;p&gt;One serious gripe I have with Copilot, though, is the lack of regard for copyleft licenses like the GPL. The last I have read on the subject indicates that Copilot’s possible recreation of GPL licensed code is &lt;em&gt;not&lt;/em&gt; a violation of the terms of the license, but my opinion is that this recreation does not match at all with the &lt;em&gt;spirit&lt;/em&gt; of the license. I feel less worry about this issue by using Copilot as a single-line autocomplete tool instead of a multi-line code generator, but this issue is still present in the product. I think my ideal solution would be a Copilot AI model that does not use any GPL+ code, sticking instead to more permissively licensed code, but I’m not sure that’s feasible with thr current design of the product.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Starter Web App Stack -- K.I.S.S.</title>
   <link href="http://localhost:4000/2021/05/05/autodo-kiss.html"/>
   <updated>2021-05-05T00:00:00-07:00</updated>
   <id>http://localhost:4000/2021/05/05/autodo-kiss</id>
   <content type="html">&lt;p&gt;I’ve spent the last couple of years working in the evenings on my side project, &lt;a href=&quot;https://github.com/autodo-app/autodo&quot;&gt;autodo&lt;/a&gt;. autodo is not a very complicated app, but I’ve taken a long and winding path towards making it work.&lt;/p&gt;

&lt;p&gt;I started out with a mobile app, only to realize that I needed a proper backend to persist the data across devices. I then looked online for an ideal stack for a first-timer’s web app. These resources largely said “Build with what you know”, which wasn’t much help for someone who had never built a web app before. The few suggestions I saw pointed to a separated frontend and backend, with React and some sort of REST API on the backend. I used Django to use my Python knowledge. I attempted to deploy this setup on a Digital Ocean VPS and found it to be a mess. I struggled with Apache configs, SSL certificates, and REST API interaction with the frontend. I gave this up after about 6 months without managing to make a working app.&lt;/p&gt;

&lt;p&gt;In the last few months, I have started rebuilding autodo from scratch. This time around, I am trying to reduce the number of frameworks and complicated pieces to the app. This involves two major changes – using Django as the MVC framework it was intended to be, and deploying on Heroku. Many of my earlier troubles were with DevOps things, and Heroku manages that for me now. Using Heroku was only possible (with my level of knowledge, anyhow) by making the switch to Django only. This means that I miss out on some of the nice UI benefits of React, but getting a working app out in the world without a huge operations headache is worth it.&lt;/p&gt;

&lt;p&gt;My recommendation for someone building their first web app is, yes, to use a language you know, but beyond that, use an MVC framework of some sorts. I’ve found Django to work well and Ruby on Rails is a similar MVC framework. These frameworks are basic and not the hot new tech but they cannot be beat for putting together a simple web app.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review -- Rework</title>
   <link href="http://localhost:4000/2021/02/08/rework.html"/>
   <updated>2021-02-08T00:00:00-08:00</updated>
   <id>http://localhost:4000/2021/02/08/rework</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/rework.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/rework.jpg 360w, /assets/img/480/rework.jpg 480w, /assets/img/640/rework.jpg 640w&quot; alt=&quot;Rework cover&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rework is a collection of helpful tips for building successful businesses and projects. It’s a brisk read but I found it to be full of helpful info and I’ve collected my takeaways here.&lt;/p&gt;

&lt;h2 id=&quot;running-projects&quot;&gt;Running Projects&lt;/h2&gt;

&lt;p&gt;Fried recommends early in the book to not turn guesses into plans. Plans let the past drive the future and prevent flexibility.&lt;/p&gt;

&lt;p&gt;I liked the section about how long projects zap morale. The longer it takes to develop the less likely it is to launch. It’s best to break big projects into little projects and then go one step at a time.&lt;/p&gt;

&lt;p&gt;Fried did make a point along these lines that I disagree with. He argues that decisions should not, typically, be postponed in the interest of making a better decision. This opposes the Agile/LEAN principle of the “Last Responsible Moment”, making decisions right before it’s absolutely needed. Waiting to make a decision, in larger companies at least, &lt;em&gt;will&lt;/em&gt; improve the likelihood of making a good decision.&lt;/p&gt;

&lt;h2 id=&quot;keeping-the-business-small&quot;&gt;Keeping the Business Small&lt;/h2&gt;

&lt;p&gt;The biggest takeaway here is that small is a fine destination for a business. Lots of big companies strive to act like they’re small again but it’s way harder to shrink a company than it is to grow it. Hiring a lot of people quickly will make it so that no one challenges ideas and instead just appeases. Along these lines, if you are a consumer business, it’s alright if customers outgrow your product.&lt;/p&gt;

&lt;h2 id=&quot;build-the-right-products&quot;&gt;Build the Right Product(s)&lt;/h2&gt;

&lt;p&gt;A number of good points here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be a curator – pare things down to only what is essential&lt;/li&gt;
  &lt;li&gt;Don’t care about beating the big player in your industry, do your own thing&lt;/li&gt;
  &lt;li&gt;Only implement the requests you hear over and over from customers&lt;/li&gt;
  &lt;li&gt;Advertise by teaching relevant skills to your product, write a “cookbook” equivalent for your teaching&lt;/li&gt;
  &lt;li&gt;Get to a great product by cutting out what is merely good.&lt;/li&gt;
  &lt;li&gt;Figure out what the epicenter of the business is – if I stop selling this thing, will I cease to have a business?&lt;/li&gt;
  &lt;li&gt;If all you do is work your decisions will end up skewed and you won’t be able to determine well what is and isn’t worth time.&lt;/li&gt;
  &lt;li&gt;If no one is upset by your opinions then you aren’t pushing hard enough or you’re just boring&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>C++ in the Background of React with WebAssembly and WebWorkers</title>
   <link href="http://localhost:4000/2021/01/30/wasm-webworker.html"/>
   <updated>2021-01-30T00:00:00-08:00</updated>
   <id>http://localhost:4000/2021/01/30/wasm-webworker</id>
   <content type="html">&lt;p&gt;My side project of choice at the moment is &lt;a href=&quot;https://github.com/baylessj/robotsquiggles&quot;&gt;Squiggles&lt;/a&gt;.
Squiggles is a library that makes it easy to create bezier curve paths, or “Squiggles”,
for robots. I wrote the library in C++.&lt;/p&gt;

&lt;p&gt;After completing the initial development of the core library I started development
of a web-based GUI for drawing out these paths. My goal for this GUI is to provide
an easier way to prototype paths by both overlaying the paths on the robot’s
field and generating the paths to confirm that they are possible. The second part
requires running the C++ code based on input from the user in the browser. C++
does not natively run client-side so we need to compile the C++ to a format the
browser can use. This is where &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt; comes in.&lt;/p&gt;

&lt;h2 id=&quot;webassembly&quot;&gt;WebAssembly&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/wasm.webp&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/wasm.webp 360w, /assets/img/480/wasm.webp 480w, /assets/img/640/wasm.webp 640w&quot; alt=&quot;WebAssembly Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebAssembly is a relatively new technology that allows compiled code to run in
the browser. The WebAssembly itself is stored as a long string of hex. Most
WebAssembly compilers, including &lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt; like I’m using, also generate a
Javascript file that aids in loading the compiled code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/emscripten.png&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/emscripten.png 360w, /assets/img/480/emscripten.png 480w, /assets/img/640/emscripten.png 640w&quot; alt=&quot;Emscripten Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used Emscripten to compile the Squiggles C++ code to WebAssembly and a Javascript
file. Emscripten is a very powerful tool and, as a result, takes a bit of
configuration to get working just right for this use case.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;emcc &lt;span class=&quot;nv&quot;&gt;$SRCS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;WASM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MODULARIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;EXTRA_EXPORTED_RUNTIME_METHODS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[\&quot;ccall\&quot;, \&quot;cwrap\&quot;]'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;EXPORT_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'squiggles'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SINGLE_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; main/include &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gnu++17 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; squiggles.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The snippet above is the script I run to build the Squiggles WebAssembly.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s WASM=1&lt;/code&gt; This flag specifies that we want emcc to output WebAssembly.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s MODULARIZE=1&lt;/code&gt; This flag exports the generated Javascript as a named module.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s EXTRA_EXPORTED_RUNTIME_METHODS='[\&quot;ccall\&quot;, \&quot;cwrap\&quot;]'&lt;/code&gt; This flag makes &lt;a href=&quot;https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-ccall-cwrap&quot;&gt;these&lt;/a&gt; functions available in the generated Javascript.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s EXPORT_NAME=\&quot;'squiggles'\&quot;&lt;/code&gt; This flag names our generated module “Squiggles”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s SINGLE_FILE=1&lt;/code&gt; This flag tells emcc to put the WebAssembly in the generated Javascript rather than in a standalone file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-I main/include&lt;/code&gt; This is the path to the C++ code’s include directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO add a section about the shim code&lt;/p&gt;

&lt;h2 id=&quot;webworker&quot;&gt;WebWorker&lt;/h2&gt;

&lt;p&gt;Generating paths with Squiggles takes a decent bit of time, at least in terms of
UI responsiveness. We don’t want to run the generation directly from the main
Javascript app because it would block the user from doing anything in the meantime.
The solution for this is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers&quot;&gt;WebWorker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will use the WebWorker to asynchronously load the WebAssembly and run the
generation. Our UI interacts with the worker by passing messages. Let’s look at
the “load” message as an example.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * This exists to capture all the events that are thrown out of the worker
 * into the worker. Without this, there would be no communication possible
 * with our project.
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Import Webassembly script&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;importScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./squiggles.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;waitForWasm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error on loading Squiggles lib&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above our worker will, after getting the “load” message, import the WebAssembly
file and then wait on the browser to make its functions callable (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;waitForWasm&lt;/code&gt;).
When this process is complete and Squiggles is ready we send a message back to
the UI.&lt;/p&gt;

&lt;p&gt;Once we’ve loaded the WebAssembly we can use this same message API to call
Squiggles’ path generation.&lt;/p&gt;

&lt;h2 id=&quot;react-integration&quot;&gt;React Integration&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/react.png&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/react.png 360w, /assets/img/480/react.png 480w, /assets/img/640/react.png 640w&quot; alt=&quot;React Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ordinarily we could just stick the generated WebAssembly/JS and WebWorker in the
site’s static assets and be good to go. I’m using &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, though, which adds
a bit more complexity. We’ll create a wrapper class in the React app to interact
with the WebWorker.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;robotsquiggles/js/squiggles.worker.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// load worker&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Capture events and save [status, event] inside the _status object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above function creates the worker and sets up the message passing. We’ll
call this first and then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.worker.postMessage&lt;/code&gt; to use the worker.&lt;/p&gt;

&lt;p&gt;The code above took me a while to troubleshoot. I kept trying to access the
worker file at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/js/squiggles.worker.js&lt;/code&gt; since that is the file’s location
relative to the root of the project. This would get me an error about an incorrect
“MIME” type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/html&lt;/code&gt;. React was automatically prepending the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;robotsquiggles&lt;/code&gt;
value from the project’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homepage&lt;/code&gt; value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, and when it couldn’t
find a file at the requested location, returned the contents of index.html.
Getting the path to the javascript file right was all it took to get the file
loaded.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squiggles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;squiggles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then call the promises defined by our wrapper in an async function in the GUI
code.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;You can find the source for this code in my &lt;a href=&quot;https://github.com/baylessj/robotsquiggles/tree/main/web&quot;&gt;Squiggles repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Huge shoutout to Vinissimus for their &lt;a href=&quot;https://github.com/vinissimus/opencv-js-webworker&quot;&gt;OpenCV-JS-WebWorker example&lt;/a&gt;,
it was a big help for figuring out the WebWorker integration with WASM.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>State of My Desk 2020</title>
   <link href="http://localhost:4000/2020/12/06/state-of-my-desk.html"/>
   <updated>2020-12-06T00:00:00-08:00</updated>
   <id>http://localhost:4000/2020/12/06/state-of-my-desk</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/desk2020.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/desk2020.jpg 360w, /assets/img/480/desk2020.jpg 480w, /assets/img/640/desk2020.jpg 640w&quot; alt=&quot;A Picture of My Desk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The set of hardware on my desk has changed pretty dramatically this year. I’ll attribute a decent part of that change to COVID-19 and working from home for most of this year; I’ve had to care a lot more about my working space as a result. I’m putting together this post as a way of reviewing the hardware I’m using and to capture this point in history of my working space, as I anticipate that it will continue to change in the coming year.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The Basics&lt;/h2&gt;

&lt;p&gt;Users of Reddit’s &lt;a href=&quot;https://reddit.com/r/battlestations&quot;&gt;r/battlestations&lt;/a&gt; will likely recognize my desk. I assembled it at the beinning of the year from a handful of IKEA parts. It’s large enough to fit everything that I’d like without being completely gigantic.&lt;/p&gt;

&lt;p&gt;You can find a build guide for it &lt;a href=&quot;https://rigz.io/ultimate-ikea-battlestation-setup/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The chair is a Steelcase Criterion I picked up from a local used office supplies store. I would highly recommend getting a used office chair, the Criterion retails for something like $800 and I got it for just $100. I also bought it right at the start of the quarantine and the shop owner was kind enough to arrange for me to pick up the chair outside the shop when it was closed.&lt;/p&gt;

&lt;h2 id=&quot;the-desktop&quot;&gt;The Desktop&lt;/h2&gt;

&lt;p&gt;I built a desktop this past year after a long series of issues with the laptops I used in college. It’s not like building a desktop is a fool-proof endeavor, but it’s not far off from building a lego set. I’m finding that it’s a lot easier to diagnose issues when they come up in my desktop and it has been running smoothly since I built it.&lt;/p&gt;

&lt;p&gt;One important factor in my choice of hardware for the desktop was actually my choice in software. Driver support in Linux has come a long way in recent years but the AMD CPU and GPU driver support seem to still outperform others. I’m using &lt;a href=&quot;https://pop.system76.com/&quot;&gt;Pop!_OS&lt;/a&gt; as my daily driver and, while it has excellent support for NVIDIA GPUs, I figured the safest option for reliability would be AMD. The &lt;a href=&quot;https://www.amd.com/en/products/graphics/radeon-rx-580&quot;&gt;AMD RX580 8GB GPU&lt;/a&gt; is an incredible value and fit well with my needs. The most intense task for my GPU is running Factorio on an ultrawide monitor and it easily does that at 60fps.&lt;/p&gt;

&lt;p&gt;I primarily use this computer for writing software and chose the CPU accordingly. The &lt;a href=&quot;https://www.amd.com/en/products/cpu/amd-ryzen-7-3700x&quot;&gt;AMD Ryzen 3700X&lt;/a&gt; has good single core speeds and packs 16 threads so it’s incredibly quick to compile my code. 16GB of RAM seems to be enough for now, but I can always fill in the other two motherboard slots if I need to.&lt;/p&gt;

&lt;p&gt;I’m able to run everything I want on this machine and it doesn’t break a sweat. I’m pretty sure this is the longest I’ve owned a computer without some part of it breaking, so that’s pretty nice too.&lt;/p&gt;

&lt;h2 id=&quot;peripherals&quot;&gt;Peripherals&lt;/h2&gt;

&lt;p&gt;I’m using two vertically stacked monitors. There’s an ultrawide as the main monitor and a 27” monitor above for reference material. Both are 1440p, which I find to be a happy medium between the standard 1080p and 4k. The width of the ultrawide allows me to keep three files open side by side. I tend to do the vast majority of my work on that monitor and then keep docs and a terminal window on the top monitor. Looking at the top monitor for a long period of time gets uncomfortable but it works great as a reference.&lt;/p&gt;

&lt;p&gt;I’ve written a lot about my keyboards, most recently about my &lt;a href=&quot;/2020/10/07/gergoplex-review.html&quot;&gt;Gergoplex&lt;/a&gt;. Unfortunately this keyboard isn’t present in the photo of my desk thanks to my lovely cat and a tipped over glass of water. So I’m back to using the &lt;a href=&quot;/2019/09/16/hotdox-review.html&quot;&gt;Hot Dox&lt;/a&gt; for a while. The Hot Dox is fine, but I’m looking forward to getting back to a Gergoplex or similar in the future.&lt;/p&gt;

&lt;p&gt;Sitting between the HotDox halves is the &lt;a href=&quot;https://www.logitech.com/en-us/products/mice/mx-ergo-wireless-trackball-mouse.html&quot;&gt;Logitech MX Ergo&lt;/a&gt; trackball mouse. It’s the perfect companion to a split keyboard. It is ergonomic, compact, and quicker than a mouse. I’m always eager to try out new keyboards but I am content to stick with the Ergo trackball.&lt;/p&gt;

&lt;p&gt;One other fun addition to my desk, sitting under the banana mug, is a coffee mug warmer. I like to keep a cup of coffee or tea with me when working and this prolongs the time it takes for the cup to get cold. I would recommend moving the mug around fairly frequently though, otherwise the coffee at the bottom will get burnt.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up a C++ library with CMake</title>
   <link href="http://localhost:4000/2020/11/05/squiggles-cmake.html"/>
   <updated>2020-11-05T00:00:00-08:00</updated>
   <id>http://localhost:4000/2020/11/05/squiggles-cmake</id>
   <content type="html">&lt;p&gt;I recently started a new side project, &lt;a href=&quot;https://squiggles.readthedocs.io&quot;&gt;Squiggles&lt;/a&gt;, a C++ library for generating
spline-based 2D paths for robots. This project was my first time setting up a
C++ library meant to be included in other projects across different platforms.
&lt;a href=&quot;https://cmake.org/&quot;&gt;CMake&lt;/a&gt; is the build system typically used in these cases
and seemed like the right fit for this project. CMake has an impressive set of
functionality but can be a bit cumbersome to set up. I’ll be walking through the
build system requirements for this project and how I used CMake to set that up.&lt;/p&gt;

&lt;h2 id=&quot;project-organization&quot;&gt;Project Organization&lt;/h2&gt;

&lt;p&gt;The project’s organization was shaped by two goals: to create a reliable, tested
library and to visualize the generated paths. These two goals led to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tst&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vis&lt;/code&gt; folders, respectively. This, along with the standard C/C++
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; directories led to the following project structure:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;squiggles
  - build
  - include
  - src
  - tst
  - vis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As is the norm with CMake, each of these source directories (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tst&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vis&lt;/code&gt;) got their own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; config file.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; directory got the typical config for a source directory; each of the
files in the directory were added to the sources list and an executable was
defined to run the project’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.cpp&lt;/code&gt;. This config also defined a static
library for use with googletest (more on that later). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;
consists of the following four lines:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(BINARY ${CMAKE_PROJECT_NAME})
file(GLOB_RECURSE SOURCES LIST_DIRECTORIES true *.h *.cpp)
add_executable(${BINARY}_run ${SOURCES})
add_library(${CMAKE_PROJECT_NAME}_lib STATIC ${SOURCES})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The config files for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tst&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vis&lt;/code&gt; directory were determined largely by
their unique uses.&lt;/p&gt;

&lt;h2 id=&quot;googletest&quot;&gt;GoogleTest&lt;/h2&gt;

&lt;p&gt;I had some experience with &lt;a href=&quot;https://github.com/google/googletest&quot;&gt;GoogleTest&lt;/a&gt; from a previous project and found it
to be an enjoyable testing framework. GoogleTest is set up to be easily
integrated with an existing CMake project so it was a particularly good fit. The
README for GoogleTest lists two methods for adding it to an existing project:
Adding it as a Git submodule and installing it as a CMake &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalProject&lt;/code&gt;. The
Git submodule is, in my opinion, the easiest installation option. I’m more
familiar with Git than CMake and it was an easy setup process.&lt;/p&gt;

&lt;p&gt;I later learned, however, that this method would cause difficulties when
adding the Squiggles project as a dependency to other projects. I started adding
Squiggles as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalProject&lt;/code&gt; to a different CMake project and got hit with
a variety of errors. These errors all pointed to the same root issue - CMake
does not play nicely with dependencies sharing a common dependency. In this case
both Squiggles and its future child project depended on GoogleTest. Both projects
attempted to install GoogleTest separately and caused conflicts.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    GoogleTest
       ^   ^
       |   |
Squiggles  |
    ^      |
    |------|
    |
  Child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The key to resolving this shared dependency issue would be to only download the
GoogleTest source and include it in the project when Squiggles was being set
up in a development environment. One crucial detail to this solution is that
CMake, when installing an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalProject&lt;/code&gt;, will configure that project by
downloading the source and all of its submodules, then running its root
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; and the default arguments.&lt;/p&gt;

&lt;p&gt;I switched from the submodule approach to including GoogleTest as an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalProject&lt;/code&gt; in Squiggles. This switch would allow me to hide the GoogleTest
installation behind a CMake &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option&lt;/code&gt;. The default behavior when setting up the
project, the behavior used by CMake’s project installation process, will be to
ignore any GoogleTest involvement. Only the static library is built and there’s
no need to build or run the tests. The development environment, alternatively,
can toggle that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option&lt;/code&gt; flag and set up the tests.&lt;/p&gt;

&lt;p&gt;The configuration for GoogleTest needed to be split out into a separate file
to ensure that it would only be loaded and run when the right option is set.
This separate config file, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt.in&lt;/code&gt;, looks like this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project(external-dependencies NONE)

include(ExternalProject)

ExternalProject_Add(googletest
  GIT_REPOSITORY    https://github.com/google/googletest.git
  GIT_TAG           release-1.8.1
  SOURCE_DIR        &quot;${CMAKE_BINARY_DIR}/googletest-src&quot;
  BINARY_DIR        &quot;${CMAKE_BINARY_DIR}/googletest-build&quot;
  CONFIGURE_COMMAND &quot;&quot;
  BUILD_COMMAND     &quot;&quot;
  INSTALL_COMMAND   &quot;&quot;
  TEST_COMMAND      &quot;&quot;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then set up the root &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; file to conditionally include the above
file and install GoogleTest:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;option(SQUIGGLES_TEST &quot;determines if we're gonna pull googletest&quot; OFF)

if (SQUIGGLES_TEST)
    # Download and unpack googletest at configure time
    configure_file(CMakeLists.txt.in external-dependencies/CMakeLists.txt)
    execute_process(COMMAND ${CMAKE_COMMAND} -G &quot;${CMAKE_GENERATOR}&quot; .
            RESULT_VARIABLE result
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/external-dependencies )
    if(result)
        message(FATAL_ERROR &quot;CMake step for dependencies failed: ${result}&quot;)
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} --build .
            RESULT_VARIABLE result
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/external-dependencies )
    if(result)
        message(FATAL_ERROR &quot;Build step for dependencies failed: ${result}&quot;)
    endif()

    # Prevent overriding the parent project's compiler/linker
    # settings on Windows
    set(gtest_force_shared_crt ON CACHE BOOL &quot;&quot; FORCE)

    # Add googletest directly to our build. This defines
    # the gtest and gtest_main targets.
    add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
                    ${CMAKE_BINARY_DIR}/googletest-build
                    EXCLUDE_FROM_ALL)

    # The gtest/gtest_main targets carry header search path
    # dependencies automatically when using CMake 2.8.11 or
    # later. Otherwise we have to add them here ourselves.
    if (CMAKE_VERSION VERSION_LESS 2.8.11)
        include_directories(&quot;${gtest_SOURCE_DIR}/include&quot;)
    endif()
endif()

include_directories(include)
include_directories(vis)

add_subdirectory(src)
if (SQUIGGLES_TEST)
    add_subdirectory(tst)
endif()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; file for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tst&lt;/code&gt; directory is almost identical to the one
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; directory but with the addition of the following two lines:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_test(NAME ${BINARY} COMMAND ${BINARY})
target_link_libraries(${BINARY} PUBLIC ${CMAKE_PROJECT_NAME}_lib gtest)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;

&lt;p&gt;My go-to tool for visualizing any sort of 2D data is Python’s &lt;a href=&quot;https://matplotlib.org/&quot;&gt;Matplotlib&lt;/a&gt;.
I’m positive that there must be a similar option for C++ out there but it’s
honestly pretty easy to interact with a C or C++ program from Python.&lt;/p&gt;

&lt;p&gt;I set up the shared library (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.so&lt;/code&gt; on linux, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dll&lt;/code&gt; on windows) in the root
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; file. I still needed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vis&lt;/code&gt;
directory to get CMake to recognize it as a subdirectory but I was able to keep
it blank.&lt;/p&gt;

&lt;p&gt;The shared object config consisted of the following lines appended to the root
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set(VIS_SO
  # A decent sized list of headers and source files needed from the source code...
  vis/compat.hpp
  vis/compat.cpp)

add_library(RobotSquiggles SHARED ${VIS_SO})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compat.hpp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compat.cpp&lt;/code&gt; files defined C-compatible functions for
interacting with the C++ library. This isn’t the most elegant solution but was
needed to convert the Object-Oriented design of the library into functions for
Python’s &lt;em&gt;ctypes&lt;/em&gt; library.&lt;/p&gt;

&lt;p&gt;The Python code loads the shared object from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; directory and calls
functions from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compat&lt;/code&gt; layer to generate paths for visualization.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.doxygen.nl/index.html&quot;&gt;Doxygen&lt;/a&gt; is the standard for C/C++ documentation generation. In a similar
vein as my earlier point about Matplotlib, though, I am used to working instead
with &lt;a href=&quot;https://www.sphinx-doc.org/en/master/&quot;&gt;Sphinx&lt;/a&gt;. Sphinx is designed with Python documentation in mind and has an
excellent, free hosting option in &lt;a href=&quot;https://readthedocs.org/&quot;&gt;ReadTheDocs&lt;/a&gt;. Sphinx does not support
autodocumentation of C++ code out of the box but can use Doxygen as a bridge
with the excellent &lt;a href=&quot;https://exhale.readthedocs.io/en/latest/&quot;&gt;Exhale&lt;/a&gt; tool. Exhale generates Doxygen XML as a part of
the Sphinx build process and automatically documents C++ code for Sphinx as if
it were natively supported Python docs.&lt;/p&gt;

&lt;p&gt;Despite the complicated nature of Exhale’s relationship with Doxygen and Sphinx
I was able to set it up very easily. I copied in the configuration details from
the Exhale README to my Sphinx &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf.py&lt;/code&gt; and started building my docs without
messing with any Doxygen configuration. This also worked on the first attempt
with ReadTheDocs which made the deployment process easy as well. I was mostly
intending to use Sphinx/Exhale just because of my familiarity with Sphinx but I
found it to be a remarkably easy documentation generation setup.&lt;/p&gt;

&lt;p&gt;You can view the docs for Squiggles live at &lt;a href=&quot;https://squiggles.readthedocs.io&quot;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;python-dependency-management&quot;&gt;Python Dependency Management&lt;/h3&gt;

&lt;p&gt;Dependency Management in Python is an unsolved problem in 2020. There are good
tools out there for sure but the choice of which tool to use is far from clear.
ReadTheDocs uses the traditional method of installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; dependencies from a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file, so my Sphinx dependencies are kept there. For local
development of the docs and visualization, however, I opted to go with
&lt;a href=&quot;https://python-poetry.org/&quot;&gt;Poetry&lt;/a&gt;. Poetry is a much heavier tool but makes it easy to set up a
virtual environment and use a different Python version than the system version.
I’m running Pop!_OS 20.04 for my development machine and that release is in a
weird limbo with system Python versions. Using Poetry was a bit of hassle given
the duplication of dependencies with ReadTheDocs’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; file but
made it much easier to set up a clean development environment for me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GBoards Gergoplex Keyboard Review</title>
   <link href="http://localhost:4000/2020/10/07/gergoplex-review.html"/>
   <updated>2020-10-07T00:00:00-07:00</updated>
   <id>http://localhost:4000/2020/10/07/gergoplex-review</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/gergoplex1.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/gergoplex1.jpg 360w, /assets/img/480/gergoplex1.jpg 480w, /assets/img/640/gergoplex1.jpg 640w&quot; alt=&quot;angled shot of the Gergoplex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recently came across the GBoards line of low-profile keyboards and immediately wanted to try out this thinner design. I still stand by my previous positive review of the &lt;a href=&quot;https://jonathanbayless.com/2019/09/16/hotdox-review.html&quot;&gt;Alpaca Keyboards HotDox&lt;/a&gt; that I was using as my daily driver, but the GBoards designs addressed a couple of my pain points with it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The height of the HotDox, and most normal keyboards, for that matter, essentially required wrist rests. The addition of wrist rests was an improvement in ergonomics but annoying to keep in place on my desk and keep clean.&lt;/li&gt;
  &lt;li&gt;The lighter switch springs in the GBoards choc switches weren’t what attracted me to the keyboards in the first place, but the 20g springs are magnificent. I put silent red switches in my HotDox, which are pretty light switches, but the 20g choc switches make the Cherry switches feel like molasses.&lt;/li&gt;
  &lt;li&gt;The thumb cluster of the HotDox was too far of a reach to be comfortable. I found myself only using the two 2u keys and the innermost of the lowest row of keys with my thumbs. The GergoPlex has an excellently designed thumb cluster, although part of me misses having a second 2u key on the cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Gergoplex builds on the admirable qualities of the HotDox and addresses its minor flaws well. The learning curve to adjust to the Gergoplex from the HotDox is, surprisingly, about the same magnitude as my transition from a staggered, traditional layout to the HotDox. I have had the keyboard for a few days now and I’m just starting to get back to my normal typing speed. While the transition to using this keyboard has not been easy I can tell now that it is an improvement.&lt;/p&gt;

&lt;h2 id=&quot;layout-and-ergonomics&quot;&gt;Layout and Ergonomics&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/gergoplex4.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/gergoplex4.jpg 360w, /assets/img/480/gergoplex4.jpg 480w, /assets/img/640/gergoplex4.jpg 640w&quot; alt=&quot;GergoPlex overlaid on the HotDox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The obvious difference between the Gergoplex and a traditional keyboad is its split, ergonomic layout. I’ve discussed this at length in my review of my HotDox, though, so I’ll focus mainly on the differences between the Gergoplex and other similar split ergo keyboards that I’ve used.&lt;/p&gt;

&lt;p&gt;The Gergoplex is the first keyboard I’ve used with &lt;a href=&quot;http://www.kailh.com/en/Products/Ks/CS/&quot;&gt;Kailh Choc&lt;/a&gt; switches. I tend to be a pretty heavy-handed typer so the shallow, light switches are a big adjustment to my normal typing habits. I started out by bottoming out hard on the choc switches but I have been learning to &lt;em&gt;tap&lt;/em&gt; the keys rather than forcing them down now. This hasn’t yet benefitted my typing speed, since I’m still getting used to the layout of the Gergoplex, but I have found the switches to be much more comfortable for a full day of writing code.&lt;/p&gt;

&lt;p&gt;I have been comfortably able to use all three of the thumb keys on the Gergoplex’s thumb cluster, which is a big improvement over my experience with the Hotdox and Iris. None of the thumb cluster keys are too far away from resting position or on a second row that requires angling my wrist forward or backward. I sometimes think that adding a fourth key to the thumb cluster would simplify the keymap pretty significantly, but I’m not sure that it would be feasible to add another key without comprising on the comfortable ergonomics of the current layout.&lt;/p&gt;

&lt;p&gt;Similarly, the 3x5 grid for the alpha characters makes the keymap a bit difficult to put together but is a big improvement for the ergonomics of the board. I would often reach over two columns or across two or three acts with my HotDox in order to reach every key but I never have to move my fingers much at all with the Gergoplex. This is another detail of the keyboard that is minor at first but becomes quite nice after a full day of programming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/gergoplex2.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/gergoplex2.jpg 360w, /assets/img/480/gergoplex2.jpg 480w, /assets/img/640/gergoplex2.jpg 640w&quot; alt=&quot;height comparison of the Gergoplex and HotDox&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;putting-together-a-keymap&quot;&gt;Putting Together a Keymap&lt;/h2&gt;

&lt;p&gt;The Gergoplex, like many other split, ergonomic keyboards, uses the wonderful &lt;a href=&quot;https://docs.qmk.fm/#/&quot;&gt;QMK&lt;/a&gt; firmware. The default keymap for the Gergoplex isn’t &lt;em&gt;bad&lt;/em&gt; by any means, but wasn’t what I was looking for. Though I took issue with some points of the HotDox’s design I was happy with &lt;a href=&quot;https://github.com/baylessj/hotdox-qmk&quot;&gt;my keymap for it&lt;/a&gt;. Moving this keymap to the Gergoplex could not be done without a fair bit of rearranging given the reduction in the number of keys. My primary tool for fitting the required characters into the Gergoplex’s small footprint was QMK’s &lt;a href=&quot;https://docs.qmk.fm/#/feature_layers&quot;&gt;Layers&lt;/a&gt;. I used two layers in my previous keymap, both activated by holding a dedicated key. The first layer simply turned the keys on the right hand side into arrow keys and home and end and such. The second layer turned the same group of keys into a numpad. These layers were a convenience; all of the above functionality was accessible through other keys outside of the easy-to-reach grid. The Gergoplex, on the other hand, &lt;em&gt;required&lt;/em&gt; such layers in order to input all of the needed characters.&lt;/p&gt;

&lt;p&gt;I kept the arrow key and numpad portions of these layers as I had before. I had to rely on another one of QMK’s unique features to access these layers now though with the Gergoplex’s limited number of keys. I now access the arrow key layer by setting the “a” key as a “Layer-Tap” QMK macro. When the “a” key is tapped it outputs an “a”, like normal, but when that key is held then it activates the arrow key layer. This macro makes it possible to keep the same layers as I had with a larger keyboard. The difference between a tap and a hold is not &lt;em&gt;that&lt;/em&gt; much time, about a quarter of a second or so I think. This is a timing difference that I have mostly been able to get used to but was very difficult to work with when learning to type on the Gergoplex. Now that I’m close to a normal typing speed I don’t spend very long with my finger held on one of thes layer-tap keys. These tap keys seem to also struggle a bit with differences in the order that the pressed keys are released; I have to be careful to release the tap key &lt;em&gt;after&lt;/em&gt; any other key that I wish to be output as the layer version.&lt;/p&gt;

&lt;p&gt;I’m thinking it might be worth taking a look at changing some of the configuration options for these layer-tap keys. I have put all of the modifier keys, those outside of the alphabet, on layers, so I’m using them very often. I don’t think I would rely on layers nearly as much if it weren’t for programming, which uses a lot of special characters. Part of me is considering adding an additional layer for just these special characters, but for now I am doing alright with adding them to the previously open keys on my arrow key and numpad layers.&lt;/p&gt;

&lt;p&gt;I have used an additional QMK macro to make up for the Gergoplex’s lack of modifier keys, the aptly named mod-tap macro. This macro is very similar to the layer-tap key but instead activates a modifier key like control or alt. These macro keys suffer from the same timing and release order issues that the layer-tap keys do but are similarly getting more manageable as my typing speed increases.&lt;/p&gt;

&lt;p&gt;One macro, of sorts, that is used extensively on the GBoards lineup of keyboards is the key combo. The GBoards keyboards are either small, like the Gergoplex, or even smaller. It’s possible for the Gergoplex to be perfectly usable by just using layers and tap keys, but it’s smaller cousins like the &lt;a href=&quot;https://www.gboards.ca/product/georgi&quot;&gt;Georgi&lt;/a&gt; and &lt;a href=&quot;https://www.gboards.ca/product/ginni&quot;&gt;Ginny&lt;/a&gt; require something closer to &lt;a href=&quot;https://en.wikipedia.org/wiki/Shorthand&quot;&gt;stenography&lt;/a&gt;. This is where key combos come in. The combos also give keys multiple outputs like the tap keys but are dependent on multiple keys being tapped at the same time. This allows, for example, “o” and “p” to work normally when pressed independently but output a “backspace” command when the two are tapped at the same time. I have only incorporated this technique into my keymap to replace the backspace key but I think I might try to start moving other characters from layers to combos like this in the future. I’ve found the key combos to be a bit more difficult to get used to conceptually compared to the tap keys but I haven’t found hardly any issues with timing on the key combos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/gergoplex3.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/gergoplex3.jpg 360w, /assets/img/480/gergoplex3.jpg 480w, /assets/img/640/gergoplex3.jpg 640w&quot; alt=&quot;wide angle shot of both halves&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;overall-impression&quot;&gt;Overall Impression&lt;/h2&gt;

&lt;p&gt;I am confident that the Gergoplex will be a more ergonomic keyboard for me in the long term and a joy to use. It has been difficult to get adjusted to using its innovative layout and I’m still fiddling with my QMK keymap, but the basis of the design is great. It is clear that this keyboard was designed after a long time of using similar split, ergonomic keyboards as it builds upon the highlights of other similar designs while addressing their flaws.&lt;/p&gt;

&lt;p&gt;You can find my keymap for the Gergoplex in &lt;a href=&quot;https://github.com/baylessj/qmk_firmware&quot;&gt;my fork of QMK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can buy a Gergoplex from &lt;a href=&quot;https://www.gboards.ca/product/gergoplex&quot;&gt;g Heavy Industries&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review -- The Design of Everyday Things</title>
   <link href="http://localhost:4000/2020/08/19/design-everyday-things.html"/>
   <updated>2020-08-19T00:00:00-07:00</updated>
   <id>http://localhost:4000/2020/08/19/design-everyday-things</id>
   <content type="html">&lt;p&gt;I’ve heard The Design of Everyday Things recommended a number of times and recently picked up a copy. This book was my introduction to design theory; the most in-depth information I had gotten on design up until this had come from blog posts. I don’t have much to compare the book to as a result but I found a lot of valuable information from it.&lt;/p&gt;

&lt;h2 id=&quot;major-points&quot;&gt;Major Points&lt;/h2&gt;

&lt;p&gt;The book started out by laying the groundwork for the terminology used in the book. The clarification of “affordances” and “signifiers” was helpful given my lack of background knowledge. The two terms are often conflated as the same but the author noted that it is important to recognize their differences. &lt;em&gt;Affordances&lt;/em&gt; are the abstract utilities provided by the product whereas &lt;em&gt;signifiers&lt;/em&gt; are the aspects of the product that explain its abilities either directly or indirectly. The key to good design, Norman explains, is in creating useful and easily understood signifiers.&lt;/p&gt;

&lt;p&gt;One other fundamental point that Norman reiterated throughout the book was that there is no such thing as “Human Error”. Many times we will blame faults on human error when the root cause was actually bad design. People tend to act in good faith and mistakes can be avoided or mitigated with well designed products.&lt;/p&gt;

&lt;h2 id=&quot;action-items&quot;&gt;Action Items&lt;/h2&gt;

&lt;p&gt;Norman built on these ideas to provide actionable items for improving product design. He spent a lot of the book discussing &lt;em&gt;mappings&lt;/em&gt; or the relationship between controls and their effects. The common example used for this was a stovetop and its burners. It would be clearest if the heat control for each burner could be physically attached to the burner it controls, but obviously this is impractical. The next best solution would be to mount the dial very physically close to the burner it controls, but that does not always fit with the overall layout of the stove. The next best, and most common, solution is to arrange the dials in the same &lt;em&gt;shape&lt;/em&gt; as the burner arrangement. We can easily determine which dial controls which burner if they are in a clear shape.&lt;/p&gt;

&lt;p&gt;One other means of ensuring that mistakes are not made is by enforcing constraints on the product’s abilities. The clearest example to me was the reminder to save a document when closing out a text editor. The program does not allow you to exit the program in one click because it can often result in a mistake of failing to save the work that was done.&lt;/p&gt;

&lt;h2 id=&quot;impressions&quot;&gt;Impressions&lt;/h2&gt;

&lt;p&gt;I found the book to be pleasantly dense with information and there were a lot of good takeaways. This did make for a rather dry read at times, however, and I didn’t find the book to be as entertaining as I thought it would be. It’s a good middle ground between a textbook on design and a casual book or blog post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zettelkasten Tooling Updates</title>
   <link href="http://localhost:4000/2020/08/07/zettelkasten-foam.html"/>
   <updated>2020-08-07T00:00:00-07:00</updated>
   <id>http://localhost:4000/2020/08/07/zettelkasten-foam</id>
   <content type="html">&lt;p&gt;While I had posted &lt;a href=&quot;https://jonathanbayless.com/2020/03/09/zettelkasten-vimwiki.html&quot;&gt;before&lt;/a&gt; about how I felt that I had found the ideal tooling for my &lt;a href=&quot;https://zettelkasten.de&quot;&gt;Zettelkasten&lt;/a&gt; in &lt;a href=&quot;https://vimwiki.github.io&quot;&gt;VimWiki&lt;/a&gt;, I hit some growing pains with the toolset as I continued to add to my notes. When my notes were fairly small it made a lot of sense to keep all of the notes in one, large document, but that got to be difficult to work with. My Zettelkasten is still far from huge compared to the examples of others on the internet; it is around 250 unique notes at the time of writing. I bounced around to a couple other tools when I decided to move away from VimWiki and I am happily (for now, I suppose) using &lt;a href=&quot;https://foambubble.github.io&quot;&gt;Foam&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;attempts-to-scale-vimwiki&quot;&gt;Attempts to scale VimWiki&lt;/h2&gt;

&lt;p&gt;I don’t intend to imply that I jumped ship from VimWiki as soon as editing my notes became the slightest bit difficult, quite the opposite in fact. I prefer using Vim for most of my text editing needs so staying in Vim to edit my notes reduced the resistance for switching mental modes to taking notes from my usual code writing. I found two additions to my VimWiki workflow that made editing easier.&lt;/p&gt;

&lt;p&gt;The first addition was isn’t a dedicated tool, really, but was a new addition to my Vim skills. I learned more about folding sections in Vim and set up my config to indent VimWiki headers. This allowed me to reduce the visual clutter of the many notes in the wiki file. This created a new problem, though, because I used the first line or two of each note as a way of determining what it was about when adding backlinks. This meant that I had to constantly fold and unfold notes, defeating most of the approach’s benefits.&lt;/p&gt;

&lt;p&gt;The second addition was an &lt;a href=&quot;https://gist.github.com/EinfachTool/9071573&quot;&gt;excellent plugin&lt;/a&gt; for Vim that allowed me to view the VimWiki headers in a standard ctags sidebar. This made it possible to see the hierarchy of notes based on their Zettelkasten tags in a simple viewer. This had the same issue as the folding addition, though, in that I couldn’t see the description when trying to make links between documents. It was an improvement but I still struggled to find the right place to add new notes and to find existing notes when creating links.&lt;/p&gt;

&lt;h2 id=&quot;restructuring-to-one-file-per-note&quot;&gt;Restructuring to one file per note&lt;/h2&gt;

&lt;p&gt;It became pretty clear that the recommended folder structure for a Zettelkasten in most tools is to use one markdown file for each note. This adds a bit more of a clear hierarchical structure to the notes than Luhman seemed to recommend in his personal Zettelkasten, but I actually have found this structure to be an improvement. The consensus seems to be a bit split on file naming, whether to use descriptive names or just the Zettelkasten identifier. I chose to put both in the file name, and so far it has made for a nice balance of easy discoverability of the note’s topic and conciseness. The recommended structure for &lt;a href=&quot;https://dendron.so&quot;&gt;Dendron&lt;/a&gt; used one large root folder and dots to indicate the document hierarchy. I found this large folder to have many of the same shortcomings that the single VimWiki had, it was hard to navigate. The nested folder structure gave me the ability to easily find notes and only see the notes that I was concerned with.&lt;/p&gt;

&lt;h2 id=&quot;obsidian&quot;&gt;Obsidian&lt;/h2&gt;

&lt;p&gt;I found out about &lt;a href=&quot;https://obsidian.md&quot;&gt;Obsidian&lt;/a&gt; from their beta announcement on Hacker News right around the time that I started to hit those growing pains with VimWiki. This convenient timing combined with the excellent feature set of Obsidian’s app made it a perfect choice for switching away from VimWiki. I was more easily able to create and edit links in Obsidian and the Obsidian editor added a very neat graph view showing the relationship between notes. This graph view helped cement for me the idea that the Zettelkasten should be a “second brain” with each note as a neuron connecting to others to form a brain-like network.&lt;/p&gt;

&lt;p&gt;It was much easier to add a lot more information to my Zettelkasten when using Obsidian as the editor. The folder based structure made it easier to find the right place to add items and the autocompletion for adding links between notes helped me connect notes better than before. The autocompletion wasn’t great though; it seemed to look for any note name that contained one of the letters in the search rather than considering the search to be a real word. This behavior meant that I often had to type out the whole name of the note anyways.&lt;/p&gt;

&lt;h2 id=&quot;dendron&quot;&gt;Dendron&lt;/h2&gt;

&lt;p&gt;My issues with the link autocompletion and a worry about Obsidian’s licensing with work-related notes led me to look further for a similar Zettelkasten tool. I also discovered &lt;a href=&quot;https://dendron.so&quot;&gt;Dendron&lt;/a&gt; through a Hacker News post and liked that it was built on Visual Studio Code rather than a standalone editor. Visual Studio Code is my other editor of choice along with Vim so using a Zettelkasten tool in VSCode would give me that same-environment benefit that VimWiki had. Switching to Visual Studio Code brought back a number of of convenient text editing shortcuts that I hadn’t realized I had missed until I switched, namely the ability to delete a whole line in a keyboard shortcut.&lt;/p&gt;

&lt;p&gt;Dendron’s link autocompletion also seemed to have issues, though. It wouldn’t split up search queries into individual letters like Obsidian, thankfully, but often the plugin would crash or would it fail to redirect me to the linked file properly. The graph view would similarly crash quite often. This is all understandable given that Dendron is in a beta stage currently, but I was a bit frustrated with the instability given how much I relied on the tool for note taking.&lt;/p&gt;

&lt;h2 id=&quot;foam&quot;&gt;Foam&lt;/h2&gt;

&lt;p&gt;Once again, I found a new option for my Zettelkasten through a Hacker News post. This time the tool was a very similar alternative to Dendron, a set of Visual Studio Code plugins called &lt;a href=&quot;https://foambubble.github.io&quot;&gt;Foam&lt;/a&gt;. Foam covered a similar feature set as Obsidian and Dendron with the addition of a Jekyll/Github Pages integration. I hope to, at some point, clean up my Zettelkasten and get it added to my personal site here since it can be added to a Jekyll site. Foam didn’t add much other new functionality besides that, but so far Foam has been able to reliably handle my ever-growing Zettelkasten with no crashes or major bugs. The link autocompletion is &lt;em&gt;excellent&lt;/em&gt; so I am able to write links to other documents without the cognitive overload of trying to remember their Zettelkasten identifiers. The graph view isn’t quite as nice as Obsidian’s but it does the trick, showing me what notes have proper links and which ones need some attention.&lt;/p&gt;

&lt;p&gt;Overall, I’m very happy with Foam. The other tools I tested along the way were suitable but I’ve found a great fit for my workflow in Foam. I’ll be sure to report back with a follow-up blog post again as my notes grow further, hopefully I’ll be able to report that Foam still fits my needs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Handwired Iris Keyboard Build</title>
   <link href="http://localhost:4000/2020/06/09/iris-handwire.html"/>
   <updated>2020-06-09T00:00:00-07:00</updated>
   <id>http://localhost:4000/2020/06/09/iris-handwire</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/iris1.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/iris1.jpg 360w, /assets/img/480/iris1.jpg 480w, /assets/img/640/iris1.jpg 640w&quot; alt=&quot;Handwired Iris Keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Forever in search of the best keyboard, I recently embarked on the journey of
hand wiring a keyboard. I had been using a &lt;a href=&quot;/2019/09/16/hotdox-review.html&quot;&gt;Hot Dox&lt;/a&gt;
keyboard for the better part of the last year and liked it for the most part. The
&lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox&lt;/a&gt; layout had two main issues for my uses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It was large and had too many keys&lt;/li&gt;
  &lt;li&gt;the thumb cluster wasn’t within easy reach for me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I only ever used the two “2u” sized thumb keys so the rest of the thumb cluster
just served to get in the way. The keys on the inside-most column of the 5x7
layout were nice to use sometimes (I had them mapped to brackets and parentheses)
but they were a decent stretch so I didn’t use them often.&lt;/p&gt;

&lt;p&gt;I discovered the plates for an &lt;a href=&quot;https://keeb.io/products/iris-keyboard-split-ergonomic-keyboard&quot;&gt;Iris Keyboard&lt;/a&gt;
when rummaging through some spare keyboard parts. The
Iris is also a split, ortholinear keyboard like the Hot Dox and Ergodox but has
a 4x6 grid with only 4 thumb keys. The resulting desk footprint of the Iris is
considerably smaller than the Ergodox while still remaining fully functional.
In my opinion, the thumb cluster is more ergonomically designed and actually
allows for all four of the keys to be used rather than just two on the Ergodox.&lt;/p&gt;

&lt;p&gt;The major hurdle for me was the extreme DIY nature of hand wiring the keyboard.
The Hot Dox was incredibly easy to build by comparison, I didn’t have to break
out the soldering iron once for that kit. That being said, building the Iris
gave me a much better understanding of how the keyboard and &lt;a href=&quot;https://docs.qmk.fm/#/&quot;&gt;QMK&lt;/a&gt;
work. Overall I would recommend the experience but it’s definitely not trivial.&lt;/p&gt;

&lt;h2 id=&quot;the-build&quot;&gt;The Build&lt;/h2&gt;

&lt;p&gt;I found that I needed the following materials to build the Iris:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Top and Bottom plates for each side (part of the kit)&lt;/li&gt;
  &lt;li&gt;Standoffs + screws for attaching the plates (part of the kit)&lt;/li&gt;
  &lt;li&gt;56 switches, I used &lt;a href=&quot;https://www.cherrymx.de/en/mx-original/mx-silent-red.html&quot;&gt;Cherry MX Silent Reds&lt;/a&gt; for the grid and &lt;a href=&quot;https://www.cherrymx.de/en/mx-special/mx-clear.html&quot;&gt;Cherry MX Clears&lt;/a&gt; for the thumb clusters&lt;/li&gt;
  &lt;li&gt;56 diodes, any can do but 1N4148s are cheap and easy to find&lt;/li&gt;
  &lt;li&gt;2 &lt;a href=&quot;https://www.sparkfun.com/products/12640&quot;&gt;Pro Micro&lt;/a&gt; microcontrollers, one for each side&lt;/li&gt;
  &lt;li&gt;Some ribbon cables&lt;/li&gt;
  &lt;li&gt;Some thicker (22 AWG or so) wire&lt;/li&gt;
  &lt;li&gt;2 SPST switches&lt;/li&gt;
  &lt;li&gt;Ideally some sort of 4 wire cable and 2 connectors, but I didn’t use that. More on that later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;assembling-the-matrix&quot;&gt;Assembling the Matrix&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/iris2.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/iris2.jpg 360w, /assets/img/480/iris2.jpg 480w, /assets/img/640/iris2.jpg 640w&quot; alt=&quot;keyboard matrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A keyboard tells the computer which key was pressed by sending a logic state “0”
on the pins that correspond to its position. This requires two electrical
characteristics – pressing the switch must close a circuit to send a “0” instead
of “1” like it would normally and there must be some way to locate what switch
was pressed. We identify the key’s location by creating a “matrix” where each
key lies on a column and a row. Each key in a given column is wired together and
each key on a given row is wired together.&lt;/p&gt;

&lt;p&gt;Each key needs its own diode connected to its row to ensure that other key presses
don’t interfere with this key’s ability to send its location. The writeup on
&lt;a href=&quot;http://blog.komar.be/how-to-make-a-keyboard-the-matrix/&quot;&gt;Komar’s Techblog&lt;/a&gt;
goes more into detail about how this matrix design allows for n-key rollover,
or NKRO.&lt;/p&gt;

&lt;p&gt;I used the approach where the legs of the diode for the row wiring and found it
to be good solution. The diode legs are not insulated so I used insulating wires
for the rest of the build to ensure that I would not short out anything.&lt;/p&gt;

&lt;h3 id=&quot;matrix-meet-micro&quot;&gt;Matrix, Meet Micro&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/iris3.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/iris3.jpg 360w, /assets/img/480/iris3.jpg 480w, /assets/img/640/iris3.jpg 640w&quot; alt=&quot;keyboard micro connections&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the matrix is wired up, each row and each column need connected to a GPIO
pin on the microcontroller. I used Pro Micro controllers for each side of the
keyboard. It is possible to avoid using two micros with some complicated wiring
but I found that it was much easier to use a dedicated micro for each side.&lt;/p&gt;

&lt;p&gt;The ribbon cable made this step much cleaner than it would have been with the
thicker wire I used for the matrix. In addition to easily organizing the cable
on the edge of the keys the ribbon cable folded over on itself very nicely when
attaching the bottom plate. The Iris is not a very thick keyboard so there was
not much additional depth left between the micro and the switches.&lt;/p&gt;

&lt;h4 id=&quot;important-note&quot;&gt;Important Note&lt;/h4&gt;

&lt;p&gt;I made a mistake on this step of the wiring on my first attempt. It is quite
convenient to use the legs of the switches as a joint where wires will connect
and be soldered together, but this does &lt;strong&gt;not&lt;/strong&gt; work for the row connections.
I had originally soldered my row connections to the row-side leg of one of the
switches, but that prevented the other keys on the row from sending presses.
This is because the key’s diode was preventing current from flowing from the other
switches to the row connection. I moved the solder joint for the row connections
to one of the diode legs and everything worked nicely.&lt;/p&gt;

&lt;h3 id=&quot;bridging-the-gap&quot;&gt;Bridging the Gap&lt;/h3&gt;

&lt;p&gt;The two sides each have their own microcontroller so they can work on their own
but we need them to talk to the computer through just one side. The two sides can
either use “soft serial” comms over three wires to talk to each other or they
can talk over &lt;a href=&quot;https://en.wikipedia.org/wiki/I%C2%B2C&quot;&gt;I2C&lt;/a&gt; with four wires.&lt;br /&gt;
I had a &lt;a href=&quot;https://www.cablechick.com.au/blog/understanding-trrs-and-audio-jacks/&quot;&gt;TRRS&lt;/a&gt; cable and associated
jacks sitting around so I opted to use I2C over its four wires. The jacks that I
had were incredibly snug fitting on the cable though, and I ended up with a whole
bunch of issues getting a connection between the two sides. The TRRS cable seems
like a better option in general compared to alternatives like an RJ45 cable or
similar but my hardware was not so great.&lt;/p&gt;

&lt;p&gt;After dealing with issues with my TRRS setup for a few hours I decided to cut
my losses and solder the wires for the two sides together. This is certainly
not the most reliable or prettiest option but it was an easy option for the time.
I’m planning to order some more TRRS jacks and another cable in the future so I
can transport the two sides individually if I need to and make the board look
less like a skunkworks project.&lt;/p&gt;

&lt;h3 id=&quot;reset-switch&quot;&gt;Reset Switch&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/iris_reset.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/iris_reset.jpg 360w, /assets/img/480/iris_reset.jpg 480w, /assets/img/640/iris_reset.jpg 640w&quot; alt=&quot;reset button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I forgot about this until I went to flash some firmware onto the board; I’d
recommend taking care of this with the rest of the wiring. I used a momentary
SPST switch from my old college EE lab kit for each side. One leg gets a connection
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GND&lt;/code&gt; and one of the other two legs gets a connection to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RST&lt;/code&gt; on the Pro Micro.
I had to play with the wiring a bit to figure out which of the legs was the normally
open connection and which one was normally closed to ensure that the reset only
occurs when the switch is pressed.&lt;/p&gt;

&lt;p&gt;After wiring it up I used a piece of double sided adhesive foam to attach it
to the top plate near the thumb cluster. You can see a bit of it in the header
photo for this article.&lt;/p&gt;

&lt;h2 id=&quot;qmk-config&quot;&gt;QMK Config&lt;/h2&gt;

&lt;p&gt;I loved the customization possibilities with &lt;a href=&quot;https://docs.qmk.fm/#/&quot;&gt;QMK&lt;/a&gt; on my Hot Dox and it was
the clear choice for my Iris build. The Iris is already supported by QMK but
the configuration is intended for an Iris that uses a PCB rather than a hand-wired
clone like mine. I &lt;a href=&quot;https://github.com/baylessj/qmk_firmware&quot;&gt;forked QMK on github&lt;/a&gt;
and started making my own modified version of the Iris QMK configuration.&lt;/p&gt;

&lt;h3 id=&quot;describing-the-wiring&quot;&gt;Describing the Wiring&lt;/h3&gt;

&lt;p&gt;The first step to getting the Iris up and running was defining the wiring in the
QMK config header. I chose the pins that made the most sense for the geometry of
my handwired build but that, unsurprisingly, did not match the pins used on the
PCB version of the Iris.&lt;/p&gt;

&lt;p&gt;One source of confusion for me in this step was the fact that each pin on the
Pro Micro has a multitude of names. The identifiers used by QMK are the Arduino
pin names rather than the names shown on the physical board or its wiring diagram.
These names are copied below. The top of the diagram is where the micro-USB
connector lies on the board.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Pro Micro Pinout:

     D3 +--------+ RAW
     D2 | +----+ | GND
     GND|        | RST
     GND|        | VCC
SDA  D1 |        | F4
SCL  D0 |        | F5
     D4 |        | F6
     C6 |        | F7
     D7 |        | B1
     E6 |        | B3
     B4 |        | B2
     B5 +--------+ B6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this in mind, I copied the files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qmk_firmware/keyboards/keebio/iris/rev4&lt;/code&gt;
(the latest keyboard revision at the time of writing) to a new folder in the same
parent directory that I called “Handwire”. I changed these files to match my keyboard’s
wiring and set this layout as my keyboard type with the QMK CLI.&lt;/p&gt;

&lt;p&gt;The pins for the matrix wiring are defined with the following lines in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.h&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define MATRIX_ROW_PINS        { B1, F7, F6, F5, F4 }
#define MATRIX_COL_PINS        { B3, B2, B6, E6, B4, B5 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The row pins are ordered from the top (furthest from the wrist) down and the
column pins are ordered from the inside (thumb side) out for the two sides.&lt;/p&gt;

&lt;h3 id=&quot;split-keyboard-things&quot;&gt;Split Keyboard Things&lt;/h3&gt;

&lt;p&gt;Most of the split keyboard-specific QMK configuration details were handled already
by the Iris files that I reused, but there were two items that I had to define
in my &lt;strong&gt;keymap&lt;/strong&gt;. This involved a different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.h&lt;/code&gt; file than the previously
mentioned wiring config, this file was in a keymap directory that I created rather
than in the “Handwire” layout config.&lt;/p&gt;

&lt;p&gt;I defined the following two macros in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keymaps/&amp;lt;MY_USER_NAME&amp;gt;/config.h&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USE_I2C&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MASTER_RIGHT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These macros tell QMK that I am using I2C over four wires to communicate between
the sides of the keyboard and that I will always plug the keyboard in to my
computer by way of the micro on the right hand side. There are other configuration
options available for determining the master side but I found that it was easiest
to just stick with the right side permanently.&lt;/p&gt;

&lt;h3 id=&quot;keymap&quot;&gt;Keymap&lt;/h3&gt;

&lt;p&gt;I was able to transfer my Hot Dox keyboard layout without a ton of modifications
because I was pretty much only using 56 keys on the Hot Dox anyways. The top row
was where I most noticed the more cramped layout of the Iris but I was able to
resolve that issue with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KC_GESC&lt;/code&gt; key macro in QMK. This allows me wrap the
grave key and the escape key into one all on the same layer. I then rearranged
the number row a bit so that it is in order from 0-9 rather than 1-9 followed by 0.
This kept the numbers, and more importantly, their symbols, in the same position
that I was used to on the Hot Dox.&lt;/p&gt;

&lt;p&gt;You can view my current keymap for my Iris board in &lt;a href=&quot;https://github.com/baylessj/qmk_firmware/blob/master/keyboards/keebio/iris/keymaps/baylessj/keymap.c&quot;&gt;my fork of QMK&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fixing a soft-bricked Logitech Receiver with fwupdmgr</title>
   <link href="http://localhost:4000/2020/05/03/bricked-mx-master-receiver.html"/>
   <updated>2020-05-03T00:00:00-07:00</updated>
   <id>http://localhost:4000/2020/05/03/bricked-mx-master-receiver</id>
   <content type="html">&lt;p&gt;I was very excited for the 20.04 LTS release of &lt;a href=&quot;https://pop.system76.com/&quot;&gt;Pop!_OS&lt;/a&gt; that came out a few
days ago. The addition of automatic window tiling and the various GNOME improvements
that came with the update were well worth the move from 19.10. After a few days
of using the update I still stand by my opinion that the upgrade was worthwhile,
but it wasn’t an easy transition.&lt;/p&gt;

&lt;p&gt;For starters, the 20.04 upgrade with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop-upgrade&lt;/code&gt; didn’t like the configuration
of my computer’s hard-drives in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt; – but that’s understandable given
that there’s three drives and a mix on windows partitions on the non-boot ones.
A fresh install took care of that issue, and all of the drives are accessible
and running fine now. I did not, however, expect that my &lt;a href=&quot;https://www.logitech.com/en-ph/product/mx-master-2s-flow&quot;&gt;Logitech MX Master 2S&lt;/a&gt;
mouse would fall victim to the upgrade process.&lt;/p&gt;

&lt;p&gt;Somewhere along the way in the fresh install of Pop!_OS 20.04, the firmware update
manager utility decided to run. This utility decided that the firmware for the
Logitech Unifying Receiver, the USB dongle for the mouse, needed updating. That
would have been fine, except the update encountered an “unexpected error” and cut
out half-way through the update. This left the mouse dongle unusable and the
mouse refused to connect to it.&lt;/p&gt;

&lt;p&gt;A quick check of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsusb | grep Logitech&lt;/code&gt; gave me &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bus 003 Device 005: ID 046d:aaac Logitech, Inc. USB BootLoader&lt;/code&gt; where the dongle was plugged in. This was good news in that the dongle
was still communicating over USB and was not hard-bricked, but it clearly isn’t
supposed to be a “BootLoader” device. The Pop!_OS firmware upgrade utility in
the Settings menu didn’t show that the device was eligible for an upgrade, but I
assumed that somehow forcing an update would improve the situation. Thankfully I
was introduced to the command line version of the update tool from a Stack Overflow
post. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fwupdmgr update&lt;/code&gt; turned out to be the solution, it correctly
identified that the “USB BootLoader” device was supposed to be a Logitech Receiver
and got it updated. It took a minute to run the upgrade and once it finished I was
able to connect the mouse to the receiver again.&lt;/p&gt;

&lt;p&gt;Upgrading to Pop!_OS 20.04 was a tumultuous journey for my mouse, but it introduced
me to the more powerful command line version of the firmware upgrade utility.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vimwiki + Zettelkasten -- Note Taking Nirvana</title>
   <link href="http://localhost:4000/2020/03/09/zettelkasten-vimwiki.html"/>
   <updated>2020-03-09T00:00:00-07:00</updated>
   <id>http://localhost:4000/2020/03/09/zettelkasten-vimwiki</id>
   <content type="html">&lt;p&gt;I’ve been in a time of turmoil with note taking and text editing. I bounced around
between a few different editors before landing on Vim full-time. I experimented
with a &lt;a href=&quot;https://gitbook.com&quot;&gt;gitbook&lt;/a&gt;, I used &lt;a href=&quot;https://joplinapp.org&quot;&gt;Joplin&lt;/a&gt; for a bit, and I wrote a lot down on paper
and post-it notes. As much as I love using pen and paper, I need to take notes
on a computer to ensure that they’ll be with me everywhere. I looked for a way
to keep my notes in one place and, ideally, in one file. The &lt;strong&gt;Zettelkasten&lt;/strong&gt;
method fit that bill exactly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zettelkasten&lt;/strong&gt; is a German word that means “slip box”. It’s a note taking
method invented by &lt;a href=&quot;https://en.wikipedia.org/wiki/Niklas_Luhmann&quot;&gt;Niklas Luhmann&lt;/a&gt;, a German Sociologist. Luhmann
wrote an impressive number of papers throughout his career using the Zettelkasten
method to collect his notes. His Zettelkasten was a physical box containing slips
of paper where he wrote his notes, hence the name. He stored every note he took as a slip in his Zettelkasten, creating a “second brain” of sorts that mirrored his knowledge.&lt;/p&gt;

&lt;p&gt;Luhmann’s own Zettelkasten defines the method. The fundamental tenets of the
method are derived from his approach. As mentioned before, Luhmann had only one
Zettelkasten throughout his entire life. Keeping these notes in one place
allowed him to accurately mirror his whole set of knowledge – including the
convoluted associations between knowledge that seems separate at first glance.
He was able to reference lessons learned from his early career even in his last
writings. I, and many others today, choose to implement this idea by having one
Zettelkasten digital file rather than a physical box. It is easy to edit files
of a considerable size with Vim so there is no real worry of needing to split the Zettelkasten files up.&lt;/p&gt;

&lt;p&gt;Without a sense of structure, a single file full of a life’s work would become
impossible to navigate. The Zettelkasten method specifies that each slip should
have a unique ID value, like a key in a database. This ID value is used to
reference the slip from other notes in the future. Inter-note references can span
years and numerous subjects in between, so long as there is reason to mention one
in the context of the other.&lt;/p&gt;

&lt;p&gt;It would be unreasonable to explicitly link to &lt;em&gt;every&lt;/em&gt; related note once the
Zettelkasten grows large, so a loose tree structure is recommended. There is no
formal requirement for choosing ID values, except that they should be unique, but
I prefer to organize notes somewhat hierarchically. A general note about Agile
meetings would get a high-level ID like #1a and a detailed note about timeboxing
Scrum standups would be nested below it as #1a1a1a. Each alternation between
alphabetical and numerical characters indicates a level of abstraction.&lt;/p&gt;

&lt;p&gt;I initially wrote my Zettelkasten in a plain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file using a rough markdown
syntax. This was manageable until my Zettelkasten file grew to about 1000 lines,
and then it became a bit of a pain to navigate between linked notes. At this point
I turned to &lt;a href=&quot;https://vimwiki.github.io/&quot;&gt;Vimwiki&lt;/a&gt; to get the linking infrastructure for my Zettelkasten.
Vimwiki does a lot beyond the linking support that I am using it for, but I will
focus primarily on that subset of features here.&lt;/p&gt;

&lt;p&gt;Each note in my Zettelkasten receives a unique ID of the form “1a1a1” and is listed
as a second level header in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zettelkasten.wiki&lt;/code&gt; file. It is then easy
to link to any other note in the Zettelkasten by adding a Vimwiki link to the note’s
anchor, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[#1a1a1|Link to other note]]&lt;/code&gt;. Pressing enter when the cursor is
over the link in normal mode will jump to that note. The structure of the
Zettelkasten IDs make it easy to find a note’s ID when putting in a link – searching
for a general term associated with the desired note will lead to its parent note.&lt;/p&gt;

&lt;p&gt;The Zettelkasten method has allowed me to start organizing my thoughts into a
digital “second brain”, and using Vim and Vimwiki for editing makes it easy to
scale with my rapidly increasing set of notes. My notes are in plain-text and
backed up in multiple places, so I don’t need to worry about vendor lock-in and
losing my notes. Using Zettelkasten with Vimwiki is just enough structure and tech
to make notetaking enjoyable, but not so much that it builds a fragile, short-lived
tech stack.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Code Ahead - A Painful Read That Makes Some Valid Points</title>
   <link href="http://localhost:4000/2020/02/28/code-ahead.html"/>
   <updated>2020-02-28T00:00:00-08:00</updated>
   <id>http://localhost:4000/2020/02/28/code-ahead</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/codeahead.png&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/codeahead.png 360w, /assets/img/480/codeahead.png 480w, /assets/img/640/codeahead.png 640w&quot; alt=&quot;Code Ahead Book Cover&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I really don’t like Yegor Bugayenko. The author of Code Ahead, a semi-autobiographical take on software engineering, comes across a condescending and annoying. The book’s protagonist is clearly modeled after the author, and he sucks. The protagonist plays a know-it-all, a nihilist, and a caricature of the author’s ideas. This creates a perfect storm of behavior that led to my hatred of the character.&lt;/p&gt;

&lt;p&gt;That said, the book makes some good points.&lt;/p&gt;

&lt;h2 id=&quot;tracking-performance&quot;&gt;Tracking Performance&lt;/h2&gt;

&lt;p&gt;A recurring theme in Code Ahead is performance tracking. Management rightfully wants a reliable metric for a programmer’s productivity, but that is not an easy ask. The protagonist argues for using closed tickets for tracking productivity. I agree with the core idea of this method. I do not, however, agree with the author’s hypothetical scenario where programmers are paid as a function of their closed tickets. This payment structure is one of the many examples of the author’s cold, simplistic view on software development.&lt;/p&gt;

&lt;p&gt;There is an interesting discussion between the book’s characters on whether this method of tracking performance is &lt;em&gt;agile&lt;/em&gt;. It is another process, after all, and it introduces a risk of the team’s programmer’s becoming feature factories. This is another reason that I do not agree with the author’s suggestion to pay developers by their number of completed tickets; pushing one metric too hard will inevitably lead to the team becoming one dimensional in pursuit of the metric.&lt;/p&gt;

&lt;p&gt;The QA team in Code Ahead has a metric that is roughly the opposite of the developers’ metric – tickets opened. This is the opposite of the conventional team structure, but I am of the opinion that it is the correct approach. The QA team should be rewarded for finding defects in their testing. It is cheaper and faster to fix bugs found before they reach the customer. Additionally, the QA team would have no tangible effect on the organization if their tests are always passing.&lt;/p&gt;

&lt;h2 id=&quot;the-definition-of-done&quot;&gt;The Definition of “Done”&lt;/h2&gt;

&lt;p&gt;A related question to the decision of what metric to track is the decision of when to consider a ticket complete. This definition of “done” varies between teams and is often the source of a lot of bugs and team conflicts. The protagonist in Code Ahead rightly points out that this definition should be very clearly understood by the team and its stakeholders. His recommended approach for making this clear to the team is to have the team decide on their definition as a group. I think this would be appropriate most of the team, but if a team has a lot of stakeholders with complex requirements then the average developer may not be able to make an informed opinion on what must constitute as “done”.&lt;/p&gt;

&lt;h2 id=&quot;bugayenko-the-egoist&quot;&gt;Bugayenko the Egoist&lt;/h2&gt;

&lt;p&gt;The primary reason for my dislike of Bugayenko is his character’s Egoistic attitude. The beginning suggests to get a role where you can wield power over your coworkers without holding any real responsibility. The protagonist is playing “poker with Tony for a place in the hierarchy” while taking a software architect role for the supposed lack of responsibility with the position. Bugayenko says that his goal with his role is to work exclusively on his own open-source projects while receiving a paycheck, bending his coworkers to his ideals, and incessantly quoting Nietzche throughout. Seriously, the guy needs to stop with the appeals to Nietzche and other philosophers.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;I like the points that the Code Ahead made, but I don’t think I actually &lt;em&gt;enjoyed&lt;/em&gt; reading the book. I would recommend reading about the book’s main discussion points elsewhere; it’s not worth the ~$40 price tag.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>~ as Home does not work in MacOS .zshrc</title>
   <link href="http://localhost:4000/2020/02/08/zshrc-macos.html"/>
   <updated>2020-02-08T00:00:00-08:00</updated>
   <id>http://localhost:4000/2020/02/08/zshrc-macos</id>
   <content type="html">&lt;p&gt;I recently picked up a 2015 MBP to use as a development machine for my side
project, &lt;a href=&quot;https://autodo.app&quot;&gt;auToDo&lt;/a&gt;, since Apple won’t let you make iOS apps without a Mac. I’m
not thrilled to be developing on a platform other than my beloved &lt;a href=&quot;https://system76.com/pop&quot;&gt;Pop! OS&lt;/a&gt;,
but it’s at least still a *nix based system.&lt;/p&gt;

&lt;p&gt;I was glad to see that, as of Catalina, MacOS uses &lt;a href=&quot;https://www.zsh.org/&quot;&gt;Zsh&lt;/a&gt; as its default shell.
I use Zsh as my default shell on my linux machine so I was excited to simply
drop in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file from the linux machine. For the most part that worked,
after installing &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh-My-Zsh&lt;/a&gt; and the other usual things, but running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter&lt;/code&gt;
did not.&lt;/p&gt;

&lt;p&gt;This was a bit of an issue since the MacBook’s main purpose in life was to be a
flutter dev machine. I spent about half an hour verifying that I had all of the
proper executables installed for Flutter and that they had the right permissions,
only to realize that the issue was very simple but not immediately obvious.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt; symbol does not expand to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/{USER_NAME}/&lt;/code&gt; in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file on MacOS
like it does in Pop! OS. I had been using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt; symbol to point to the location
of the flutter binaries on my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, which worked on my linux machine but not
on the MacBook. I changed these symbols to the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/{USER_NAME}/&lt;/code&gt; string
in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; and everything worked fine and dandy for Flutter.&lt;/p&gt;

&lt;p&gt;Don’t be like me, use full paths in your Mac’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Alpaca Keyboards Hot Dox Review</title>
   <link href="http://localhost:4000/2019/09/16/hotdox-review.html"/>
   <updated>2019-09-16T00:00:00-07:00</updated>
   <id>http://localhost:4000/2019/09/16/hotdox-review</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/assets/img/keyboard1.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/keyboard1.jpg 360w, /assets/img/480/keyboard1.jpg 480w, /assets/img/640/keyboard1.jpg 640w&quot; alt=&quot;keyboard photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recently picked up a &lt;a href=&quot;https://www.alpacakeyboards.com/&quot;&gt;Hot Dox&lt;/a&gt; keyboard from &lt;a href=&quot;https://www.alpacakeyboards.com/&quot;&gt;Alpaca Keyboards&lt;/a&gt; as my introduction to the world of split ergonomic keyboards. My primary goals in moving from a traditional mechanical keyboard were to get an improvement in ergonomics and to get much more customization potential than I had with my current keyboards. The Hot Dox is acceptable on the ergonomics front and excellent on the customization front due to its use of the &lt;a href=&quot;https://qmk.fm/&quot;&gt;QMK Firmware&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ergonomics&quot;&gt;Ergonomics&lt;/h3&gt;

&lt;p&gt;The layout of the Hot Dox differs in many ways from a traditional keyboard and, in my opinion, those differences are largely for the better. The Hot Dox is a clone of the &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox&lt;/a&gt; keyboard, which is described as an &lt;em&gt;ortholinear, split keyboard&lt;/em&gt;. For those who aren’t familiar, I’ll break down those adjectives individually.&lt;/p&gt;

&lt;h4 id=&quot;ortholinear&quot;&gt;Ortholinear&lt;/h4&gt;

&lt;p&gt;An &lt;em&gt;ortholinear&lt;/em&gt; keyboard is a keyboard where each of the keys are grouped in straight columns rather than in a staggered layout like a traditional keyboard. In my experience it is a surprisingly different experience to type on an ortholinear keyboard compared to a traditional; the keys are only moved a tiny bit on the keyboard but forcing the keys into perfect columns drastically changed the way my fingers moved to hit most keys. Hitting keys that are not on home row is achieved through a linear movement of the corresponding typing finger and there is no need for a change in hand orientation.&lt;/p&gt;

&lt;p&gt;After a couple of months with my Hot Dox I still can’t claim to be completely used to this new layout, but it makes a lot more sense than a staggered layout. It seems to me like a milder version of switching to a non-traditional layout like &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Dvorak_Simplified_Keyboard&quot;&gt;Dvorak&lt;/a&gt;– while there are pros to the changed layout, one will likely always have times when the have to switch back to a traditional layout. I have not had too hard of a time making the mental switch associated with using a traditional keyboard some times and the ortholinear layout at other times, but it is definitely still noticeable.&lt;/p&gt;

&lt;h4 id=&quot;split&quot;&gt;Split&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;split&lt;/em&gt; keyboard is very easily noticeable as such, the halves of the keyboard associated with each typing hand are, well, split apart. The main benefit of this design is ergonomics; it is a lot more natural to have your arms sitting even with your shoulders than to stick your hands in line with the middle of your ribcage like with a traditional keyboard. I don’t have any &lt;a href=&quot;https://en.wikipedia.org/wiki/Repetitive_strain_injury&quot;&gt;RSI&lt;/a&gt; issues with my hands to combat so I don’t have a huge need for the improved ergonomics but it helps me rest easier knowing that I’m doing less harm to my body by typing for so many hours a day.&lt;/p&gt;

&lt;p&gt;One somewhat unintended benefit of the split layout is forcing good habit when typing. I had previously been pretty bad about moving my hands around the keyboard and off of home row but with the split keyboard it’s impossible to accidentally start typing on the wrong hand’s side of the keyboard. I’ve noticed that this has improved my typing form on traditional keyboards as well.&lt;/p&gt;

&lt;h3 id=&quot;qmk&quot;&gt;QMK&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;QMK Firmware&lt;/em&gt; is without a doubt my favorite part of using this keyboard. This firmware allows you to change the behavior of every key on the keyboard to fit your preferences. The modifications to the key behavior is not restricted simply to the standard set of keys that can be accessed without holding any modifier keys, instead you can add up to 32 &lt;strong&gt;layers&lt;/strong&gt; of different functionality. A layer is similar to the change from lowercase to uppercase that occurs when holding the shift key. I have one layer that allows me to use the arrow keys on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i, j, k, l&lt;/code&gt; keys so I don’t have to move from home row, another layer that allows me to move the mouse with the same set of keys, and another layer that gives me a numpad around home row position. These layers give me all of the benefits of a full-size keyboard (plus some, in the case of the mouse keys) without ever having to leave home row.&lt;/p&gt;

&lt;p&gt;You can find my QMK configuration file on my &lt;a href=&quot;https://github.com/baylessj/hotdox-qmk&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tenting-modification&quot;&gt;Tenting Modification&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/keyboard2.jpg&quot; sizes=&quot;`(min-width: 640px) 60vw, 90vw&quot; srcset=&quot;/assets/img/360/keyboard2.jpg 360w, /assets/img/480/keyboard2.jpg 480w, /assets/img/640/keyboard2.jpg 640w&quot; alt=&quot;tented keyboard macro shot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I made one minor modification to my assembly of the keyboard that has made a decent improvement in my impression of its ergonomics. One popular configuration with split keyboards is a &lt;em&gt;tented&lt;/em&gt; configuration where the inside edge of each of the keyboard halves is raised somewhat. This puts your hands at a slight angle, which is a more natural way for them to sit. Some keyboards allow this behavior by default, such as the &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox&lt;/a&gt;, but the Hot Dox does not.&lt;/p&gt;

&lt;p&gt;For $4 and a trip to the hardware store, however, I was able to easily achieve some slight tenting to my keyboard. I got a set of 3mm x 16mm button head screw with a 2mm drive and a 3mm - 0.5 hex nut for each of the screws. I replaced the screws holding together the case on the inside corners with these longer screws, adjusted the hex nuts snug against the case, and had a nice tented keyboard setup.&lt;/p&gt;

&lt;h3 id=&quot;overall-impressions&quot;&gt;Overall Impressions&lt;/h3&gt;

&lt;p&gt;Making the switch to a split, ortholinear keyboard has been a difficult transition, but I’ve found that this keyboard makes it well worth it. My typing ability has improved on other keyboards as well, but the flexibility with the QMK Firmware allows me to be my most productive on this keyboard. 10/10 – get a cool keyboard.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gradle Configuration for Firebase Usage in Flutter</title>
   <link href="http://localhost:4000/2019/08/07/flutter-firebase-gradle.html"/>
   <updated>2019-08-07T00:00:00-07:00</updated>
   <id>http://localhost:4000/2019/08/07/flutter-firebase-gradle</id>
   <content type="html">&lt;p&gt;I recently got started developing a cross-platform app in &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;, a framework developed by Google that uses the &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart&lt;/a&gt; programming language. One major benefit of the fact that Flutter is created by Google is the &lt;em&gt;mostly&lt;/em&gt; easy integration with Google’s other services. I have come across one minor exception to this rule in my attempt to integrate &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; with my Flutter project, an error regarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file generation.&lt;/p&gt;

&lt;h3 id=&quot;original-gradle-modifications&quot;&gt;Original Gradle Modifications&lt;/h3&gt;

&lt;p&gt;I followed along with Google’s guide on modifying my app’s &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt; configuration files to integrate Firebase services into the app. My Gradle config files after implementing the Google guide’s changes were as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./android/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.gms:google-services:4.3.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = &quot;${rootProject.buildDir}/${project.name}&quot;
}
subprojects {
    project.evaluationDependsOn(':app')
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./android/app/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -&amp;gt;
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException(&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;)
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: &quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId &quot;com.jonathanbayless.autodo&quot;
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;too-many-methods-for-one-dex-file&quot;&gt;Too many methods for one Dex file&lt;/h3&gt;

&lt;p&gt;After I was done following the Google guide I was met with a build error that was not addressed in the Google guide. The addition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-services&lt;/code&gt; package inflated the size of the built project to the point that it exceeded the number of methods allowed in a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file is similar to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jar&lt;/code&gt; file from typical Java development but is unique to the Android ecosystem. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file is used as an intermediary file in developing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; file that will be loaded onto the Android device. I discovered through this error message that the default Gradle configuration generated with Flutter only uses one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file to generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The solution I found to this error consisted of two changes: enabling a build flag regarding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; generation and enabling resource shrinking. The default configuration that only allows for one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file can be changed by setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiDexEnabled&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaultConfig&lt;/code&gt; section of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android&lt;/code&gt; rules.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaultConfig {
    applicationId &quot;com.jonathanbayless.autodo&quot;

    multiDexEnabled true

    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
    testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first change alone will solve the build errors, but I was frustrated with the massive increase in size of my application when I was only using a small portion of the Firebase feature set. There are two additional flags available to reduce the size of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dex&lt;/code&gt; files and resulting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.apk&lt;/code&gt; file. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shrinkResources&lt;/code&gt; flag removes unnecessary code that comes by default with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-services&lt;/code&gt; package and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minifyEnabled&lt;/code&gt; just removes any dead code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildTypes {
    release {
        // TODO: Add your own signing config for the release build.
        // Signing with the debug keys for now, so `flutter run --release` works.
        signingConfig signingConfigs.debug

        shrinkResources true
        minifyEnabled true

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The mix of these three flags reduced the size of my application and got it back to being able to compile.&lt;/p&gt;

&lt;h4 id=&quot;resulting-gradle-file&quot;&gt;Resulting Gradle File&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./android/&lt;/code&gt; Gradle config file was not changed at all, it was the same as in the original example. Here is the modified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./android/app/&lt;/code&gt; Gradle file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -&amp;gt;
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException(&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;)
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: &quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId &quot;com.jonathanbayless.autodo&quot;
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            shrinkResources true
            minifyEnabled true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://localhost:4000/2019/06/16/helloworld.html"/>
   <updated>2019-06-16T00:00:00-07:00</updated>
   <id>http://localhost:4000/2019/06/16/helloworld</id>
   <content type="html">&lt;p&gt;I’m a big fan of side-projects and I’ve run a &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;
site as my personal site for a while now, so it seemed inevitable that I would take
advantage of its blogging capabilities at some point.&lt;/p&gt;

&lt;p&gt;I have a number of fun new projects in the works now, hopefully I’ll be able
to put together some nice articles on those in the near future.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
