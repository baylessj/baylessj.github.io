<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Jonathan Bayless</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000"/>
 <updated>2019-11-02T15:12:06-04:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Jonathan Bayless</name>
   <email>me@jonathanbayless.com</email>
 </author>

 
 <entry>
   <title>Alpaca Keyboards Hot Dox Review</title>
   <link href="http://localhost:4000/2019/09/16/hotdox-review.html"/>
   <updated>2019-09-16T00:00:00-04:00</updated>
   <id>http://localhost:4000/2019/09/16/hotdox-review</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/keyboard1.jpg&quot; alt=&quot;image keyboard photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recently picked up a &lt;a href=&quot;https://www.alpacakeyboards.com/&quot;&gt;Hot Dox&lt;/a&gt; keyboard from &lt;a href=&quot;https://www.alpacakeyboards.com/&quot;&gt;Alpaca Keyboards&lt;/a&gt; as my introduction to the world of split ergonomic keyboards. My primary goals in moving from a traditional mechanical keyboard were to get an improvement in ergonomics and to get much more customization potential than I had with my current keyboards. The Hot Dox is acceptable on the ergonomics front and excellent on the customization front due to its use of the &lt;a href=&quot;https://qmk.fm/&quot;&gt;QMK Firmware&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ergonomics&quot;&gt;Ergonomics&lt;/h3&gt;

&lt;p&gt;The layout of the Hot Dox differs in many ways from a traditional keyboard and, in my opinion, those differences are largely for the better. The Hot Dox is a clone of the &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox&lt;/a&gt; keyboard, which is described as an &lt;em&gt;ortholinear, split keyboard&lt;/em&gt;. For those who aren’t familiar, I’ll break down those adjectives individually.&lt;/p&gt;

&lt;h4 id=&quot;ortholinear&quot;&gt;Ortholinear&lt;/h4&gt;

&lt;p&gt;An &lt;em&gt;ortholinear&lt;/em&gt; keyboard is a keyboard where each of the keys are grouped in straight columns rather than in a staggered layout like a traditional keyboard. In my experience it is a surprisingly different experience to type on an ortholinear keyboard compared to a traditional; the keys are only moved a tiny bit on the keyboard but forcing the keys into perfect columns drastically changed the way my fingers moved to hit most keys. Hitting keys that are not on home row is achieved through a linear movement of the corresponding typing finger and there is no need for a change in hand orientation.&lt;/p&gt;

&lt;p&gt;After a couple of months with my Hot Dox I still can’t claim to be completely used to this new layout, but it makes a lot more sense than a staggered layout. It seems to me like a milder version of switching to a non-traditional layout like &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Dvorak_Simplified_Keyboard&quot;&gt;Dvorak&lt;/a&gt;– while there are pros to the changed layout, one will likely always have times when the have to switch back to a traditional layout. I have not had too hard of a time making the mental switch associated with using a traditional keyboard some times and the ortholinear layout at other times, but it is definitely still noticeable.&lt;/p&gt;

&lt;h4 id=&quot;split&quot;&gt;Split&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;split&lt;/em&gt; keyboard is very easily noticeable as such, the halves of the keyboard associated with each typing hand are, well, split apart. The main benefit of this design is ergonomics; it is a lot more natural to have your arms sitting even with your shoulders than to stick your hands in line with the middle of your ribcage like with a traditional keyboard. I don’t have any &lt;a href=&quot;https://en.wikipedia.org/wiki/Repetitive_strain_injury&quot;&gt;RSI&lt;/a&gt; issues with my hands to combat so I don’t have a huge need for the improved ergonomics but it helps me rest easier knowing that I’m doing less harm to my body by typing for so many hours a day.&lt;/p&gt;

&lt;p&gt;One somewhat unintended benefit of the split layout is forcing good habit when typing. I had previously been pretty bad about moving my hands around the keyboard and off of home row but with the split keyboard it’s impossible to accidentally start typing on the wrong hand’s side of the keyboard. I’ve noticed that this has improved my typing form on traditional keyboards as well.&lt;/p&gt;

&lt;h3 id=&quot;qmk&quot;&gt;QMK&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;QMK Firmware&lt;/em&gt; is without a doubt my favorite part of using this keyboard. This firmware allows you to change the behavior of every key on the keyboard to fit your preferences. The modifications to the key behavior is not restricted simply to the standard set of keys that can be accessed without holding any modifier keys, instead you can add up to 32 &lt;strong&gt;layers&lt;/strong&gt; of different functionality. A layer is similar to the change from lowercase to uppercase that occurs when holding the shift key. I have one layer that allows me to use the arrow keys on the &lt;code class=&quot;highlighter-rouge&quot;&gt;i, j, k, l&lt;/code&gt; keys so I don’t have to move from home row, another layer that allows me to move the mouse with the same set of keys, and another layer that gives me a numpad around home row position. These layers give me all of the benefits of a full-size keyboard (plus some, in the case of the mouse keys) without ever having to leave home row.&lt;/p&gt;

&lt;p&gt;You can find my QMK configuration file on my &lt;a href=&quot;https://github.com/baylessj/hotdox-qmk&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tenting-modification&quot;&gt;Tenting Modification&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/keyboard2.jpg&quot; alt=&quot;image tented keyboard macro shot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I made one minor modification to my assembly of the keyboard that has made a decent improvement in my impression of its ergonomics. One popular configuration with split keyboards is a &lt;em&gt;tented&lt;/em&gt; configuration where the inside edge of each of the keyboard halves is raised somewhat. This puts your hands at a slight angle, which is a more natural way for them to sit. Some keyboards allow this behavior by default, such as the &lt;a href=&quot;https://ergodox-ez.com/&quot;&gt;Ergodox&lt;/a&gt;, but the Hot Dox does not.&lt;/p&gt;

&lt;p&gt;For $4 and a trip to the hardware store, however, I was able to easily achieve some slight tenting to my keyboard. I got a set of 3mm x 16mm button head screw with a 2mm drive and a 3mm - 0.5 hex nut for each of the screws. I replaced the screws holding together the case on the inside corners with these longer screws, adjusted the hex nuts snug against the case, and had a nice tented keyboard setup.&lt;/p&gt;

&lt;h3 id=&quot;overall-impressions&quot;&gt;Overall Impressions&lt;/h3&gt;

&lt;p&gt;Making the switch to a split, ortholinear keyboard has been a difficult transition, but I’ve found that this keyboard makes it well worth it. My typing ability has improved on other keyboards as well, but the flexibility with the QMK Firmware allows me to be my most productive on this keyboard. 10/10 – get a cool keyboard.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gradle Configuration for Firebase Usage in Flutter</title>
   <link href="http://localhost:4000/2019/08/07/flutter-firebase-gradle.html"/>
   <updated>2019-08-07T00:00:00-04:00</updated>
   <id>http://localhost:4000/2019/08/07/flutter-firebase-gradle</id>
   <content type="html">&lt;p&gt;I recently got started developing a cross-platform app in &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;, a framework developed by Google that uses the &lt;a href=&quot;https://dart.dev/&quot;&gt;Dart&lt;/a&gt; programming language. One major benefit of the fact that Flutter is created by Google is the &lt;em&gt;mostly&lt;/em&gt; easy integration with Google’s other services. I have come across one minor exception to this rule in my attempt to integrate &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; with my Flutter project, an error regarding &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file generation.&lt;/p&gt;

&lt;h3 id=&quot;original-gradle-modifications&quot;&gt;Original Gradle Modifications&lt;/h3&gt;

&lt;p&gt;I followed along with Google’s guide on modifying my app’s &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt; configuration files to integrate Firebase services into the app. My Gradle config files after implementing the Google guide’s changes were as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./android/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.gms:google-services:4.3.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = &quot;${rootProject.buildDir}/${project.name}&quot;
}
subprojects {
    project.evaluationDependsOn(':app')
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./android/app/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -&amp;gt;
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException(&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;)
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: &quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId &quot;com.jonathanbayless.autodo&quot;
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;too-many-methods-for-one-dex-file&quot;&gt;Too many methods for one Dex file&lt;/h3&gt;

&lt;p&gt;After I was done following the Google guide I was met with a build error that was not addressed in the Google guide. The addition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;google-services&lt;/code&gt; package inflated the size of the built project to the point that it exceeded the number of methods allowed in a single &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file is similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; file from typical Java development but is unique to the Android ecosystem. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file is used as an intermediary file in developing a &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; file that will be loaded onto the Android device. I discovered through this error message that the default Gradle configuration generated with Flutter only uses one &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file to generate the &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The solution I found to this error consisted of two changes: enabling a build flag regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; generation and enabling resource shrinking. The default configuration that only allows for one &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; file can be changed by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;multiDexEnabled&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultConfig&lt;/code&gt; section of the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; rules.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaultConfig {
    applicationId &quot;com.jonathanbayless.autodo&quot;

    multiDexEnabled true

    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
    testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first change alone will solve the build errors, but I was frustrated with the massive increase in size of my application when I was only using a small portion of the Firebase feature set. There are two additional flags available to reduce the size of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dex&lt;/code&gt; files and resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; file. The &lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkResources&lt;/code&gt; flag removes unnecessary code that comes by default with the &lt;code class=&quot;highlighter-rouge&quot;&gt;google-services&lt;/code&gt; package and the &lt;code class=&quot;highlighter-rouge&quot;&gt;minifyEnabled&lt;/code&gt; just removes any dead code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildTypes {
    release {
        // TODO: Add your own signing config for the release build.
        // Signing with the debug keys for now, so `flutter run --release` works.
        signingConfig signingConfigs.debug

        shrinkResources true
        minifyEnabled true

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The mix of these three flags reduced the size of my application and got it back to being able to compile.&lt;/p&gt;

&lt;h4 id=&quot;resulting-gradle-file&quot;&gt;Resulting Gradle File&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;./android/&lt;/code&gt; Gradle config file was not changed at all, it was the same as in the original example. Here is the modified &lt;code class=&quot;highlighter-rouge&quot;&gt;./android/app/&lt;/code&gt; Gradle file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -&amp;gt;
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException(&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;)
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: &quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId &quot;com.jonathanbayless.autodo&quot;
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            shrinkResources true
            minifyEnabled true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://localhost:4000/blog/2019/06/16/helloworld.html"/>
   <updated>2019-06-16T00:00:00-04:00</updated>
   <id>http://localhost:4000/blog/2019/06/16/helloworld</id>
   <content type="html">&lt;p&gt;I’m a big fan of side-projects and I’ve run a &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;
site as my personal site for a while now, so it seemed inevitable that I would take
advantage of its blogging capabilities at some point.&lt;/p&gt;

&lt;p&gt;I have a number of fun new projects in the works now, hopefully I’ll be able
to put together some nice articles on those in the near future.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
